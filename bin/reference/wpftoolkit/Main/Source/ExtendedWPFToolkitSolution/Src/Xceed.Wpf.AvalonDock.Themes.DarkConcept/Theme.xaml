<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:localThemes="clr-namespace:Xceed.Wpf.AvalonDock.Themes"
    xmlns:shell="clr-namespace:Microsoft.Windows.Shell;assembly=Xceed.Wpf.AvalonDock"
    xmlns:avalonDock="clr-namespace:Xceed.Wpf.AvalonDock;assembly=Xceed.Wpf.AvalonDock"
    xmlns:avalonDockLayout="clr-namespace:Xceed.Wpf.AvalonDock.Layout;assembly=Xceed.Wpf.AvalonDock"
    xmlns:avalonDockControls="clr-namespace:Xceed.Wpf.AvalonDock.Controls;assembly=Xceed.Wpf.AvalonDock"
    xmlns:avalonDockConverters="clr-namespace:Xceed.Wpf.AvalonDock.Converters;assembly=Xceed.Wpf.AvalonDock"
    xmlns:avalonDockProperties="clr-namespace:Xceed.Wpf.AvalonDock.Properties;assembly=Xceed.Wpf.AvalonDock"
    >
	<ResourceDictionary.MergedDictionaries>
		<ResourceDictionary Source="Brushes.xaml"/>
	</ResourceDictionary.MergedDictionaries>

	<avalonDockConverters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
	<avalonDockConverters:InverseBoolToVisibilityConverter x:Key="InverseBoolToVisibilityConverter"/>
	<avalonDockConverters:AnchorSideToOrientationConverter x:Key="AnchorSideToOrientationConverter"/>
	<avalonDockConverters:AnchorSideToAngleConverter x:Key="AnchorSideToAngleConverter"/>
	<avalonDockConverters:NullToDoNothingConverter x:Key="NullToDoNothingConverter"/>
	<avalonDockConverters:LayoutItemFromLayoutModelConverter x:Key="LayoutItemFromLayoutModelConverter"/>
	<avalonDockConverters:ActivateCommandLayoutItemFromLayoutModelConverter x:Key="ActivateCommandLayoutItemFromLayoutModelConverter"/>

	<Style x:Key="AvalonDock_DarkConcept_ToolButtonStyle" TargetType="ToggleButton">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="Padding" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Border BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}">
						<ContentPresenter/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="AvalonDock_DarkConcept_ButtonStyle" TargetType="Button">
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="BorderThickness" Value="1"/>
		<Setter Property="BorderBrush" Value="Transparent"/>
		<Setter Property="Padding" Value="0"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="Button">
					<Border BorderBrush="{TemplateBinding BorderBrush}"
                            Background="{TemplateBinding Background}"
                            BorderThickness="{TemplateBinding BorderThickness}">
						<ContentPresenter/>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="AvalonDock_DarkConcept_AnchorablePaneControlStyle" TargetType="{x:Type avalonDockControls:LayoutAnchorablePaneControl}">
		<Setter Property="TabStripPlacement" Value="Bottom"/>
		<Setter Property="Padding" Value="0"/>
		<Setter Property="BorderThickness" Value="0"/>
		<!--<Setter Property="Foreground" Value="{Binding Model.Root.Manager.Foreground, RelativeSource={RelativeSource Self}}"/>
		<Setter Property="Background" Value="{Binding Model.Root.Manager.Background, RelativeSource={RelativeSource Self}}"/>-->
		<Setter Property="Foreground" Value="{DynamicResource DarkTheme_MainColor}"/>
		<Setter Property="Background" Value="{DynamicResource DarkTheme_MainColor}"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorablePaneControl}">
					<Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local" Margin="5">
						<Grid.RowDefinitions>
							<RowDefinition Height="*"/>
							<RowDefinition Height="Auto"/>
						</Grid.RowDefinitions>
						<!--Following border is required to catch mouse events-->
						<Border Background="Transparent" Grid.RowSpan="2"/>
						<Border x:Name="ContentPanel" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{DynamicResource DarkTheme_DockingLayoutBackgroundColor}" 
                                Grid.Column="0" 
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                Grid.Row="0" 
                                KeyboardNavigation.TabIndex="2" 
                                KeyboardNavigation.TabNavigation="Cycle">
							<ContentPresenter x:Name="PART_SelectedContentHost"
                                              ContentSource="SelectedContent" 
                                              Margin="{TemplateBinding Padding}"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
						</Border>
						<avalonDockControls:AnchorablePaneTabPanel x:Name="HeaderPanel" Margin="0,0,0,2" IsItemsHost="true" Grid.Row="1" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="false">
							<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
						<DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Self}}" Value="1">
							<Setter Property="Margin" Value="0" TargetName="HeaderPanel"/>
						</DataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>

		<Setter Property="ItemContainerStyle">
			<Setter.Value>
				<Style TargetType="{x:Type TabItem}">
					<Setter Property="Background" Value="Transparent"/>
					<Setter Property="BorderBrush" Value="Transparent"/>
					<Setter Property="Foreground" Value="{DynamicResource DarkTheme_ITemContainerBackgroundColor}"/>
					<Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
					<Setter Property="ToolTip" Value="{Binding ToolTip}"/>
					<Setter Property="Template">
						<Setter.Value>
							<ControlTemplate TargetType="{x:Type TabItem}">
								<Grid SnapsToDevicePixels="true">
									<Border x:Name="Bd" 
                                          Margin="1,0,0,0"
							              Background="{DynamicResource DarkTheme_LightGray}" 
							              Padding="6,0,6,0">
										<ContentPresenter 
								            x:Name="Content" 
								            ContentSource="Header"
                                            Margin="5"
                                            HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" 
                                            VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                            RecognizesAccessKey="True" 
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
									</Border>
								</Grid>
								<ControlTemplate.Triggers>
									<Trigger Property="Selector.IsSelected"
								            Value="true">
										<Setter Property="BorderBrush"
									        Value="{DynamicResource DarkTheme_ITemContainerBackgroundColor}" />
										<Setter Property="Panel.ZIndex" 
                                            Value="1" />
									</Trigger>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter TargetName="Bd" Property="Background" Value="{DynamicResource DarkTheme_LayoutSelectColor}" />
                                    </Trigger>

									<DataTrigger Binding="{Binding IsActive}" Value="True">
										<Setter Property="BorderBrush"
									        Value="{DynamicResource DarkTheme_LayoutSelectColor}" />
                                        <!--<Setter Property="Foreground" Value="{DynamicResource DarkTheme_ITemContainerBackgroundColor}"/>-->
										<!--<Setter Property="Panel.ZIndex" 
                                            Value="1" />-->
									</DataTrigger>
									<MultiTrigger>
										<MultiTrigger.Conditions>
											<Condition Property="IsMouseOver" Value="true"/>
											<Condition Property="Selector.IsSelected" Value="false"/>
										</MultiTrigger.Conditions>
										<Setter Property="BorderBrush" Value="{DynamicResource DarkTheme_BaseColor4}"/>
										<Setter Property="Panel.ZIndex" Value="0" />
									</MultiTrigger>
									<Trigger Property="IsEnabled" Value="false">
										<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
									</Trigger>
								</ControlTemplate.Triggers>
							</ControlTemplate>
						</Setter.Value>
					</Setter>
					<Style.Triggers>
						<DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type TabControl}}, Path=Items.Count}" Value="1">
							<Setter Property="Visibility" Value="Collapsed"/>
						</DataTrigger>
					</Style.Triggers>
				</Style>
			</Setter.Value>
		</Setter>

		<Setter Property="ItemTemplate">
			<Setter.Value>
				<DataTemplate>
					<avalonDockControls:LayoutAnchorableTabItem Model="{Binding}"/>
				</DataTemplate>
			</Setter.Value>
		</Setter>

		<Setter Property="ContentTemplate">
			<Setter.Value>
				<DataTemplate>
					<avalonDockControls:LayoutAnchorableControl Model="{Binding}"/>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>

    <Style x:Key="AvalonDock_DarkConcept_DocumentPaneControlStyle" TargetType="{x:Type avalonDockControls:LayoutDocumentPaneControl}">
        <Setter Property="BorderBrush" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentPaneControl}">
                    <Grid ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local" Margin="5">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <!--Following border is required to catch mouse events-->
                        <!--<Border Background="Transparent" Grid.RowSpan="2"/>-->
                        <Grid  Panel.ZIndex="1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <avalonDockControls:DocumentPaneTabPanel x:Name="HeaderPanel" Grid.Column="0" IsItemsHost="true" Grid.Row="0" KeyboardNavigation.TabIndex="1"/>
                            <avalonDockControls:DropDownButton
                                x:Name="MenuDropDownButton"
                                Style="{StaticResource AvalonDock_DarkConcept_ToolButtonStyle}"
                                Focusable="False"
                                VerticalAlignment="Center"
                                Grid.Column="1">
                                <avalonDockControls:DropDownButton.DropDownContextMenu>
                                    <avalonDockControls:ContextMenuEx
                                        ItemsSource="{Binding Model.ChildrenSorted, RelativeSource={RelativeSource TemplatedParent}}">
                                        <avalonDockControls:ContextMenuEx.ItemContainerStyle>
                                            <Style TargetType="{x:Type avalonDockControls:MenuItemEx}" BasedOn="{StaticResource {x:Type MenuItem}}">
                                                <Setter Property="HeaderTemplate" Value="{Binding Path=Root.Manager.DocumentPaneMenuItemHeaderTemplate}"/>
                                                <Setter Property="HeaderTemplateSelector" Value="{Binding Path=Root.Manager.DocumentPaneMenuItemHeaderTemplateSelector}"/>
                                                <Setter Property="IconTemplate" Value="{Binding Path=Root.Manager.IconContentTemplate}"/>
                                                <Setter Property="IconTemplateSelector" Value="{Binding Path=Root.Manager.IconContentTemplateSelector}"/>
                                                <Setter Property="Command" Value="{Binding Path=., Converter={StaticResource ActivateCommandLayoutItemFromLayoutModelConverter}}"/>
                                            </Style>
                                        </avalonDockControls:ContextMenuEx.ItemContainerStyle>
                                    </avalonDockControls:ContextMenuEx>
                                </avalonDockControls:DropDownButton.DropDownContextMenu>
                                <Image Source="Images/PinDocMenu.png"/>
                            </avalonDockControls:DropDownButton>
                        </Grid>
                        <Border x:Name="ContentPanel" 
                                VerticalAlignment="Stretch" 
                                HorizontalAlignment="Stretch"  
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="#FF595959" 
                                Grid.Column="0"
                                KeyboardNavigation.DirectionalNavigation="Contained"
                                Grid.Row="1" 
                                KeyboardNavigation.TabIndex="2" 
                                KeyboardNavigation.TabNavigation="Cycle"
                                >

                            <ContentPresenter x:Name="PART_SelectedContentHost" 
                                              ContentSource="SelectedContent" 
                                              Margin="0"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" SourceName="MenuDropDownButton" Value="True">
                            <Setter Property="Content" TargetName="MenuDropDownButton">
                                <Setter.Value>
                                    <Image Source="Images/PinDocMenu.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsChecked" SourceName="MenuDropDownButton" Value="True">
                            <Setter Property="Content" TargetName="MenuDropDownButton">
                                <Setter.Value>
                                    <Image Source="Images/PinDocMenu.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Model.ChildrenCount}" Value="0">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="MenuDropDownButton" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type TabItem}">
                    <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                    <Setter Property="Foreground" Value="{DynamicResource DarkTheme_ITemContainerBackgroundColor}"/>
                    <Setter Property="ToolTip" Value="{Binding ToolTip}"/>
                    <Setter Property="Padding" Value="0"/>
                    <Setter Property="Margin" Value="1,0,1,0"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type TabItem}">
                                <Grid SnapsToDevicePixels="true"
                                       Margin="0">
                                    <Border x:Name="Bd" 
													CornerRadius="5,5,0,0"
                                          BorderBrush="{DynamicResource DarkTheme_PanelBorderBrush}"
                                          Background="{DynamicResource DarkTheme_LightGray}"
   				                          BorderThickness="1"
                                          Width="130"
							              >
                                    </Border>
                                    <ContentPresenter 
								            x:Name="Content" 
                                            Margin="2"
								            ContentSource="Header" 
                                            HorizontalAlignment="Left"
                                            VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                            RecognizesAccessKey="True" 
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="Selector.IsSelected"
								            Value="true">
                                        <Setter Property="BorderBrush"
									        Value="#969146" />
                                        <Setter Property="Panel.ZIndex" 
                                            Value="1" />
                                        <Setter Property="Background"
                                                Value="Aqua"/>
                                    </Trigger>

                                    <DataTrigger Binding="{Binding IsActive}" Value="True">
                                        <Setter Property="BorderBrush" Value="#311008" />
                                        <Setter Property="Foreground" Value="{DynamicResource DarkTheme_ITemContainerBackgroundColor}"/>
                                        <Setter Property="Panel.ZIndex" 
                                            Value="1" />
                                    </DataTrigger>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter TargetName="Bd" Property="Background" Value="{DynamicResource DarkTheme_Gray}"/>
                                    </Trigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsMouseOver" Value="true"/>
                                            <Condition Property="Selector.IsSelected" Value="false"/>
                                        </MultiTrigger.Conditions>
                                        <Setter Property="BorderBrush" Value="#000000"/>
                                        <Setter Property="Foreground" Value="{DynamicResource DarkTheme_ITemContainerBackgroundColor}"/>
                                        <Setter Property="Panel.ZIndex" Value="0" />
                                    </MultiTrigger>
                                    <Trigger Property="IsEnabled" Value="false">
                                        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutDocumentTabItem Model="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <avalonDockControls:LayoutDocumentControl Model="{Binding}"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type avalonDock:DockingManager}" TargetType="{x:Type avalonDock:DockingManager}">
		<Setter Property="Background" Value="{DynamicResource DarkTheme_MainColor}"/>
		<Setter Property="DocumentPaneControlStyle" Value="{StaticResource AvalonDock_DarkConcept_DocumentPaneControlStyle}"/>
		<Setter Property="AnchorablePaneControlStyle" Value="{StaticResource AvalonDock_DarkConcept_AnchorablePaneControlStyle}"/>
		<!--<Setter Property="AnchorSideTemplate" Value="{StaticResource AvalonDock_ThemeMetro_AnchorSideTemplate}"/>-->
		<!--<Setter Property="AnchorGroupTemplate" Value="{StaticResource AvalonDock_ThemeMetro_AnchorGroupTemplate}"/>-->
		<!--<Setter Property="AnchorTemplate" Value="{StaticResource AvalonDock_ThemeMetro_AnchorTemplate}"/>-->
		<!--<Setter Property="DocumentHeaderTemplate" Value="{StaticResource AvalonDock_DarkConcept_DocumentHeaderTemplate}"/>-->
		<!--<Setter Property="AnchorableHeaderTemplate" Value="{StaticResource AvalonDock_ThemeMetro_AnchorableHeaderTemplate}"/>-->
		<!--<Setter Property="DocumentTitleTemplate" Value="{StaticResource AvalonDock_DarkConcept_DocumentTitleTemplate}"/>-->
		<!--<Setter Property="AnchorableTitleTemplate" Value="{StaticResource AvalonDock_DarkConcept_AnchorableTitleTemplate}"/>-->
		<!--<Setter Property="AnchorableContextMenu" Value="{StaticResource AvalonDock_ThemeMetro_AnchorableContextMenu}"/>-->
		<!--<Setter Property="DocumentContextMenu" Value="{StaticResource AvalonDock_ThemeMetro_DocumentContextMenu}"/>-->
		<!--<Setter Property="DocumentPaneMenuItemHeaderTemplate" Value="{StaticResource AvalonDock_ThemeMetro_DocumentHeaderTemplate}"/>-->
		<!--<Setter Property="IconContentTemplate" Value="{StaticResource AvalonDock_ThemeMetro_IconContentTemplate}"/>-->
		<Setter Property="GridSplitterWidth" Value="5"/>
		<Setter Property="GridSplitterHeight" Value="5"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type avalonDock:DockingManager}">
					<Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="*"/>
								<RowDefinition Height="Auto"/>
							</Grid.RowDefinitions>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="*"/>
								<ColumnDefinition Width="Auto"/>
							</Grid.ColumnDefinitions>
							<ContentPresenter Content="{TemplateBinding LayoutRootPanel}" Grid.Column="1" Grid.Row="1"/>
							<ContentPresenter Content="{TemplateBinding RightSidePanel}" Grid.Column="2" Grid.Row="1"/>
							<ContentPresenter Content="{TemplateBinding LeftSidePanel}" Grid.Column="0" Grid.Row="1"/>
							<ContentPresenter Content="{TemplateBinding TopSidePanel}" Grid.Column="1" Grid.Row="0"/>
							<ContentPresenter Content="{TemplateBinding BottomSidePanel}" Grid.Column="1" Grid.Row="2"/>
							<ContentPresenter 
                                x:Name="PART_AutoHideArea"
                                Content="{TemplateBinding AutoHideWindow}"
                                VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                Grid.Column="1" Grid.Row="1"/>
						</Grid>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
	
	<Style TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type avalonDockControls:LayoutAnchorableControl}">
					<Border 
                        x:Name="Bd"
                        Background="Transparent"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        >
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="*"/>
							</Grid.RowDefinitions>
							<Border x:Name="Header"
                                    Width="200" HorizontalAlignment="Left" BorderBrush="{DynamicResource DarkTheme_PanelBorderBrush}" BorderThickness="1,1,1,0" CornerRadius="5,5,0,0"
                                Background="{DynamicResource DarkTheme_Gray}">
								<avalonDockControls:AnchorablePaneTitle 
                                    Model="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"/>
							</Border>
              <Border x:Name="Content" Grid.Row="1" Background="{DynamicResource DarkTheme_Gray}" BorderBrush="{DynamicResource DarkTheme_PanelBorderBrush}" BorderThickness="1">
							<ContentPresenter 
                                
                                FlowDirection="{TemplateBinding FlowDirection}" 
                                Content="{Binding LayoutItem.View, RelativeSource={RelativeSource TemplatedParent}}"/>
              </Border>
              <!--<ContentPresenter 
                                Content="{Binding Model.Content, RelativeSource={RelativeSource TemplatedParent}}" 
                                ContentTemplate="{Binding LayoutItemTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                ContentTemplateSelector="{Binding LayoutItemTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                Grid.Row="1"/>-->
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<MultiDataTrigger>
							<MultiDataTrigger.Conditions>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.IsFloating}" Value="True"/>
								<Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=Model.Parent.IsDirectlyHostedInFloatingWindow}" Value="True"/>
							</MultiDataTrigger.Conditions>
							<Setter Property="Visibility" Value="Collapsed" TargetName="Header"/>
						</MultiDataTrigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type avalonDockControls:LayoutGridResizerControl}" TargetType="{x:Type avalonDockControls:LayoutGridResizerControl}">
		<Setter Property="Background" Value="DarkGray"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type avalonDockControls:LayoutGridResizerControl}">
          <!--<Border Background="{DynamicResource DarkTheme_MainSpliter}" Margin="2" />-->
                    <GridSplitter HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ShowsPreview="True" Background="{DynamicResource DarkTheme_MainSpliter}"/>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style TargetType="avalonDockControls:AnchorablePaneTitle">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate>
					<Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="5,5,0,0"
                            Padding="1">
						<Grid>
							<Grid.ColumnDefinitions>
								<ColumnDefinition Width="*"/>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="Auto"/>
								<ColumnDefinition Width="Auto"/>
							</Grid.ColumnDefinitions>
							<avalonDockControls:DropDownControlArea 
                                DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                DropDownContextMenuDataContext="{Binding Path=LayoutItem, RelativeSource={RelativeSource TemplatedParent}}">
								<ContentPresenter 
                                    x:Name="Header"            
                                    Margin="5,0,0,0"
                                    TextElement.Foreground="{DynamicResource DarkTheme_White}"
                                    Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Left"
                                    ContentTemplate="{Binding Model.Root.Manager.AnchorableTitleTemplate, RelativeSource={RelativeSource TemplatedParent}}"
                                    ContentTemplateSelector="{Binding Model.Root.Manager.AnchorableTitleTemplateSelector, RelativeSource={RelativeSource TemplatedParent}}"/>
							</avalonDockControls:DropDownControlArea>


							<avalonDockControls:DropDownButton
                                x:Name="MenuDropDownButton"
                                VerticalAlignment="Center"
                                Style="{StaticResource AvalonDock_DarkConcept_ToolButtonStyle}"
                                Focusable="False"
                                Grid.Column="1"
                                DropDownContextMenu="{Binding Model.Root.Manager.AnchorableContextMenu, RelativeSource={RelativeSource TemplatedParent}}"
                                DropDownContextMenuDataContext="{Binding Path=LayoutItem, RelativeSource={RelativeSource TemplatedParent}}"
                                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_CxMenu_Hint}">
								<Image x:Name="PART_ImgMenuPin" Source="Images/PinMenu.png"/>
							</avalonDockControls:DropDownButton>

							<Button x:Name="PART_AutoHidePin" 
                                Grid.Column="2" 
                                Focusable="False"
                                Style="{StaticResource AvalonDock_DarkConcept_ButtonStyle}"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Center"
                                Command="{Binding Path=LayoutItem.AutoHideCommand, RelativeSource={RelativeSource TemplatedParent}}" 
                                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"
                                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnAutoHide_Hint}"
                                    >
								<Image x:Name="PART_ImgAutoHidePin" Source="Images/PinAutoHide.png"/>
							</Button>
							<Button x:Name="PART_HidePin" 
                                Grid.Column="3" 
                                Focusable="False"
                                Style="{StaticResource AvalonDock_DarkConcept_ButtonStyle}"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Center"
                                Command="{Binding Path=LayoutItem.HideCommand, RelativeSource={RelativeSource TemplatedParent}}" 
                                Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"
                                ToolTip="{x:Static avalonDockProperties:Resources.Anchorable_BtnClose_Hint}"
                                    >
								<Image x:Name="PART_ImgHidePin" Source="Images/PinClose.png"/>
							</Button>

						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<DataTrigger Binding="{Binding Model.IsAutoHidden, RelativeSource={RelativeSource Mode=Self}}" Value="True">
							<Setter Property="LayoutTransform" TargetName="PART_AutoHidePin">
								<Setter.Value>
									<RotateTransform Angle="90"/>
								</Setter.Value>
							</Setter>
						</DataTrigger>
						<DataTrigger Binding="{Binding Model.IsActive, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                            <Setter Property="Background" Value="{DynamicResource DarkTheme_LayoutSelectColor}" />
                            
						</DataTrigger>
						<!--<DataTrigger Binding="{Binding Model.IsActive, RelativeSource={RelativeSource Mode=Self}}" Value="True">
							<Setter Property="Source" TargetName="PART_ImgAutoHidePin" Value="Images/PinAutoHide_Dark.png"/>
							<Setter Property="Source" TargetName="PART_ImgHidePin" Value="Images/PinClose_Dark.png"/>
							<Setter Property="Source" TargetName="PART_ImgMenuPin" Value="Images/PinMenu_Dark.png"/>
						</DataTrigger>-->
						<Trigger Property="IsMouseOver" SourceName="MenuDropDownButton" Value="True">
							<Setter Property="Source" TargetName="PART_ImgMenuPin" Value="Images/PinMenu.png"/>
						</Trigger>
						<Trigger Property="IsChecked" SourceName="MenuDropDownButton" Value="True">
							<Setter Property="Source" TargetName="PART_ImgMenuPin" Value="Images/PinMenu.png"/>
						</Trigger>
						<Trigger Property="IsMouseOver" SourceName="PART_AutoHidePin" Value="True">
							<Setter Property="Source" TargetName="PART_ImgAutoHidePin" Value="Images/PinAutoHide.png"/>
						</Trigger>
						<Trigger Property="IsMouseOver" SourceName="PART_HidePin" Value="True">
							<Setter Property="Source" TargetName="PART_ImgHidePin" Value="Images/PinClose.png"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
  
  <Style TargetType="{x:Type avalonDockControls:LayoutDocumentTabItem}">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type avalonDockControls:LayoutDocumentTabItem}">
          <avalonDockControls:DropDownControlArea 
                            DropDownContextMenu="{Binding Root.Manager.DocumentContextMenu}"
                            DropDownContextMenuDataContext="{Binding LayoutItem, RelativeSource={RelativeSource TemplatedParent}}" >
            <Border Background="Transparent"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            >
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Border Grid.ColumnSpan="2" Background="Transparent"/>
                <ContentPresenter Content="{Binding Model, RelativeSource={RelativeSource TemplatedParent}}" 
                                  TextElement.Foreground="{DynamicResource DarkTheme_White}"
                                  Width="90"
                                  Margin="5,0,0,0"
                                  VerticalAlignment="Center"
                                  HorizontalAlignment="Center"
                                  ContentTemplate="{Binding DocumentHeaderTemplate, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"
                                  ContentTemplateSelector="{Binding DocumentHeaderTemplateSelector, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type avalonDock:DockingManager}, Mode=FindAncestor}}"/>
                <!-- Close button should be moved out to the container style -->
                <Button x:Name="DocumentCloseButton" Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" Grid.Column="1" Margin="5,0,0,0" Visibility="Hidden" 
                                        Command="{Binding Path=LayoutItem.CloseCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                        ToolTip="{x:Static avalonDockProperties:Resources.Document_Close}">
                  <Image Source="/Xceed.Wpf.AvalonDock;component/Themes/Generic/Images/PinClose.png"/>
                </Button>
              </Grid>
            </Border>
          </avalonDockControls:DropDownControlArea>
          <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=IsSelected}" Value="true">
              <Setter Property="Visibility" Value="Visible" TargetName="DocumentCloseButton"  />
            </DataTrigger>
            <Trigger Property="IsMouseOver" Value="True">
              <Setter Property="Visibility" Value="Visible" TargetName="DocumentCloseButton"  />
            </Trigger>
            <DataTrigger Binding="{Binding Path=CanClose}" Value="false">
              <Setter Property="Visibility" Value="Collapsed" TargetName="DocumentCloseButton"  />
            </DataTrigger>
            <DataTrigger Binding="{Binding Model.IsActive, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                            <!--<Setter Property="Background" Value="#303030" />-->
            </DataTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <DataTemplate x:Key="AvalonDock_DarkConcept_DocumentTitleTemplate">
		<TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" FontSize="15" FontWeight="Bold" HorizontalAlignment="Center" Foreground="Black"/>
	</DataTemplate>

	<DataTemplate x:Key="AvalonDock_DarkConcept_AnchorableTitleTemplate">
		<TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" FontSize="15" FontWeight="Bold" HorizontalAlignment="Center" Foreground="Black"/>
	</DataTemplate>

	<DataTemplate x:Key="AvalonDock_DarkConcept_DocumentHeaderTemplate">
		<TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" Foreground="White"/>
	</DataTemplate>


</ResourceDictionary>